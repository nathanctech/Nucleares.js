const Sensors = {
    CORE_TEMP: "CORE_TEMP",
    CORE_TEMP_OPERATIVE: "CORE_TEMP_OPERATIVE",
    CORE_TEMP_MAX: "CORE_TEMP_MAX",
    CORE_TEMP_MIN: "CORE_TEMP_MIN",
    CORE_TEMP_RESIDUAL: "CORE_TEMP_RESIDUAL",
    CORE_PRESSURE: "CORE_PRESSURE",
    CORE_PRESSURE_MAX: "CORE_PRESSURE_MAX",
    CORE_PRESSURE_OPERATIVE: "CORE_PRESSURE_OPERATIVE",
    CORE_INTEGRITY: "CORE_INTEGRITY",
    CORE_WEAR: "CORE_WEAR",
    CORE_STATE: "CORE_STATE",
    CORE_STATE_CRITICALITY: "CORE_STATE_CRITICALITY",
    CORE_CRITICAL_MASS_REACHED: "CORE_CRITICAL_MASS_REACHED",
    CORE_CRITICAL_MASS_REACHED_COUNTER: "CORE_CRITICAL_MASS_REACHED_COUNTER",
    CORE_IMMINENT_FUSION: "CORE_IMMINENT_FUSION",
    CORE_READY_FOR_START: "CORE_READY_FOR_START",
    CORE_STEAM_PRESENT: "CORE_STEAM_PRESENT",
    CORE_HIGH_STEAM_PRESENT: "CORE_HIGH_STEAM_PRESENT",
    TIME: "TIME",
    TIME_STAMP: "TIME_STAMP",
    COOLANT_CORE_STATE: "COOLANT_CORE_STATE",
    COOLANT_CORE_PRESSURE: "COOLANT_CORE_PRESSURE",
    COOLANT_CORE_MAX_PRESSURE: "COOLANT_CORE_MAX_PRESSURE",
    COOLANT_CORE_VESSEL_TEMPERATURE: "COOLANT_CORE_VESSEL_TEMPERATURE",
    COOLANT_CORE_QUANTITY_IN_VESSEL: "COOLANT_CORE_QUANTITY_IN_VESSEL",
    COOLANT_CORE_PRIMARY_LOOP_LEVEL: "COOLANT_CORE_PRIMARY_LOOP_LEVEL",
    COOLANT_CORE_FLOW_SPEED: "COOLANT_CORE_FLOW_SPEED",
    COOLANT_CORE_FLOW_ORDERED_SPEED: "COOLANT_CORE_FLOW_ORDERED_SPEED",
    COOLANT_CORE_FLOW_REACHED_SPEED: "COOLANT_CORE_FLOW_REACHED_SPEED",
    COOLANT_CORE_QUANTITY_CIRCULATION_PUMPS_PRESENT: "COOLANT_CORE_QUANTITY_CIRCULATION_PUMPS_PRESENT",
    COOLANT_CORE_QUANTITY_FREIGHT_PUMPS_PRESENT: "COOLANT_CORE_QUANTITY_FREIGHT_PUMPS_PRESENT",
    COOLANT_CORE_CIRCULATION_PUMP_0_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_0_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_1_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_1_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_2_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_2_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_0_DRY_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_0_DRY_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_1_DRY_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_1_DRY_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_2_DRY_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_2_DRY_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_1_OVERLOAD_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_1_OVERLOAD_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_2_OVERLOAD_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_2_OVERLOAD_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_3_OVERLOAD_STATUS: "COOLANT_CORE_CIRCULATION_PUMP_3_OVERLOAD_STATUS",
    COOLANT_CORE_CIRCULATION_PUMP_0_ORDERED_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_0_ORDERED_SPEED",
    COOLANT_CORE_CIRCULATION_PUMP_1_ORDERED_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_1_ORDERED_SPEED",
    COOLANT_CORE_CIRCULATION_PUMP_2_ORDERED_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_2_ORDERED_SPEED",
    COOLANT_CORE_CIRCULATION_PUMP_0_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_0_SPEED",
    COOLANT_CORE_CIRCULATION_PUMP_1_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_1_SPEED",
    COOLANT_CORE_CIRCULATION_PUMP_2_SPEED: "COOLANT_CORE_CIRCULATION_PUMP_2_SPEED",
    RODS_STATUS: "RODS_STATUS",
    RODS_MOVEMENT_SPEED: "RODS_MOVEMENT_SPEED",
    RODS_MOVEMENT_SPEED_DECREASED_HIGH_TEMPERATURE: "RODS_MOVEMENT_SPEED_DECREASED_HIGH_TEMPERATURE",
    RODS_DEFORMED: "RODS_DEFORMED",
    RODS_TEMPERATURE: "RODS_TEMPERATURE",
    RODS_MAX_TEMPERATURE: "RODS_MAX_TEMPERATURE",
    RODS_POS_ORDERED: "RODS_POS_ORDERED",
    RODS_POS_ACTUAL: "RODS_POS_ACTUAL",
    RODS_POS_REACHED: "RODS_POS_REACHED",
    RODS_QUANTITY: "RODS_QUANTITY",
    RODS_ALIGNED: "RODS_ALIGNED",
}

const PumpStatus = ["Inactive", "Active, no speed reached", "Active, speed reached", "Requires Maintenance", "Not installed", "Insufficient energy"];
const PumpDryStatus = ["Active without fluid", "Inactive or active with fluid"];
const PumpOverloadStatus = ["Active and overload", "Inactive or active no overload"];

class NuclearesAPI {
    constructor() {
        const func = async (name) => { return await this.getData(name); };
        this.PumpDryStatus = PumpDryStatus;
        this.PumpOverloadStatus = PumpOverloadStatus;
        this.PumpStatus = PumpStatus;
        this.Sensors = Sensors;
    }

    /**
     * 
     * @param {Sensors} name 
     */
    async getData(name) {
        await fetch(`http://localhost:8080/?Variable=${name}`).then(async (response) => {
            const data = await response.text();
            const returnData = { value: data, value_str: null };
            if (name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_0_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_1_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_2_STATUS) {
                returnData.value_str = PumpStatus[data];
            } else if (name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_0_DRY_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_1_DRY_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_2_DRY_STATUS) {
                returnData.value_str = PumpDryStatus[data];
            } else if (name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_1_OVERLOAD_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_2_OVERLOAD_STATUS || name == Sensors.COOLANT_CORE_CIRCULATION_PUMP_3_OVERLOAD_STATUS) {
                returnData.value_str = PumpOverloadStatus[data];
            }
            return returnData;
        }).catch((err) => {
            console.log(err);
            return null;
        });
    }
}

module.exports = { NuclearesAPI, Sensors };